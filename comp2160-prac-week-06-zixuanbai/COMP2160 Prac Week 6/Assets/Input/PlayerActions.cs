//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Plane"",
            ""id"": ""4bbe8743-9c43-4863-af3a-4b89963f8f24"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""81216fc2-85a3-42a5-8661-c641ec996305"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""0a4da2f0-41b1-4124-aad7-48573e99bf05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bomb"",
                    ""type"": ""Button"",
                    ""id"": ""e299e346-e623-4545-b20b-ca9317f6cafd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""eb2c25ea-6a4d-454a-a743-4038c2ab1832"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ad236947-5667-482f-8aa1-4fa9f879e505"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b87bc696-2b6b-4daa-8b1e-7fa1244505cd"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d398f10f-05ff-4501-8fb0-317a16119749"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""85a6a44a-3d5f-47be-938c-0861ed659ff0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7e60641b-3460-4f60-b16b-5b4be9cb3893"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d272625-fbc5-4642-b255-8f3442cc1836"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Plane
        m_Plane = asset.FindActionMap("Plane", throwIfNotFound: true);
        m_Plane_Movement = m_Plane.FindAction("Movement", throwIfNotFound: true);
        m_Plane_Fire = m_Plane.FindAction("Fire", throwIfNotFound: true);
        m_Plane_Bomb = m_Plane.FindAction("Bomb", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Plane
    private readonly InputActionMap m_Plane;
    private IPlaneActions m_PlaneActionsCallbackInterface;
    private readonly InputAction m_Plane_Movement;
    private readonly InputAction m_Plane_Fire;
    private readonly InputAction m_Plane_Bomb;
    public struct PlaneActions
    {
        private @PlayerActions m_Wrapper;
        public PlaneActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Plane_Movement;
        public InputAction @Fire => m_Wrapper.m_Plane_Fire;
        public InputAction @Bomb => m_Wrapper.m_Plane_Bomb;
        public InputActionMap Get() { return m_Wrapper.m_Plane; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaneActions set) { return set.Get(); }
        public void SetCallbacks(IPlaneActions instance)
        {
            if (m_Wrapper.m_PlaneActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnMovement;
                @Fire.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnFire;
                @Bomb.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnBomb;
                @Bomb.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnBomb;
                @Bomb.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnBomb;
            }
            m_Wrapper.m_PlaneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Bomb.started += instance.OnBomb;
                @Bomb.performed += instance.OnBomb;
                @Bomb.canceled += instance.OnBomb;
            }
        }
    }
    public PlaneActions @Plane => new PlaneActions(this);
    public interface IPlaneActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnBomb(InputAction.CallbackContext context);
    }
}
